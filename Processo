## 🏗 Passo a Passo da Implementação

### 1️⃣ Criando o Ambiente no Azure

1. Acesse o portal [Azure Portal](https://portal.azure.com/).
2. Crie um **Grupo de Recursos** para organizar os ativos.
3. Configure uma **Assinatura** vinculada à conta gratuita.
4. Defina um **Plano de Nomenclatura** para manter a padronização.

### 2️⃣ Implantando o Azure Data Factory

1. No **Azure Portal**, vá até "Criar um recurso" e selecione **Data Factory**.
2. Escolha o grupo de recursos criado anteriormente.
3. Defina a região e nome do serviço seguindo as boas práticas.
4. Conclua a implantação e acesse o painel do **Data Factory**.

### 3️⃣ Monitorando os Custos

1. Acesse **Azure Cost Management + Billing** no portal.
2. Configure **métricas de uso e custo** para o Data Factory.
3. Defina **alertas de custo** para evitar gastos inesperados.
4. Crie um **dashboard personalizado** para visualização simplificada.

### 4️⃣ Automação com Azure Cloud Shell

1. Acesse o **Azure Cloud Shell** no portal.
2. Utilize **PowerShell** ou **Azure CLI** para gerenciar recursos.
3. Automatize tarefas recorrentes com **scripts ARM Templates**.
4. Teste a criação e remoção automatizada de recursos para otimização.

### 5️⃣ Implementação com Python 🚀

Podemos automatizar o monitoramento dos custos do **Azure Data Factory** utilizando Python e a **Azure SDK**. Siga os passos abaixo:

#### 📌 Instale as bibliotecas necessárias:
```sh
pip install azure-identity azure-mgmt-costmanagement
```

#### 📝 Código em Python para Monitoramento de Custos:
```python
from azure.identity import DefaultAzureCredential
from azure.mgmt.costmanagement import CostManagementClient
import datetime


SUBSCRIPTION_ID = "xxxx-xxxx-xxxx-xxxx"
BUDGET_LIMIT = 50


credential = DefaultAzureCredential()
client = CostManagementClient(credential)

# Define o período para consulta (últimos 30 dias)
end_date = datetime.date.today()
start_date = end_date - datetime.timedelta(days=30)

# Consulta os custos do Data Factory
cost_request = {
    "type": "Usage",
    "timeframe": "Custom",
    "time_period": {
        "from": start_date.strftime('%Y-%m-%d'),
        "to": end_date.strftime('%Y-%m-%d')
    },
    "dataset": {
        "granularity": "Daily",
        "aggregation": {
            "totalCost": {
                "name": "PreTaxCost",
                "function": "Sum"
            }
        }
    }
}


response = client.query.usage(f"/subscriptions/{SUBSCRIPTION_ID}", cost_request)
total_cost = sum(item["totalCost"] for item in response.rows)

print(f"💰 Custo total nos últimos 30 dias: ${total_cost:.2f}")


# Verifica se o custo ultrapassou o limite
if total_cost > BUDGET_LIMIT:
    print("⚠️ ALERTA: O custo ultrapassou o limite definido!")
else:
    print("✅ Tudo certo! O custo está dentro do orçamento.")
```

Esse script **autentica no Azure**, **consulta os custos do Data Factory** e **gera alertas caso os gastos ultrapassem o limite definido**. 🚀

---

## 🎯 Resultados Esperados

- ✅ Melhor controle dos custos no Azure 💰.
- ✅ Configuração eficiente do **Data Factory** 🏗.
- ✅ Dashboards intuitivos para acompanhamento 📊.
- ✅ Automação e infraestrutura como código 📜.
- ✅ Monitoramento automatizado via **Python** 🤖.
